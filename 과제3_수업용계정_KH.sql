/*
    [과제 1]
    
    - 회원테이블(번호, 이름, 전화번호, 이메일, 혈액형) 설계
        (NEW_MEMBER), 시퀀스 설정(초기값100, 증가치5, 캐쉬2)
    
    - 데이터 5명입력
    
    - 트리거 발생(TRG_MEMBER)DELETE) 회원이 탈퇴하면 회원정보를(BACK_MEMBER)테이블에 저장기능 설계
    
    - BACK_MEMBER 테이블에 시퀀스 등록할수 있도록 설계
        => 삭제한 회원의 날짜도 BACK_MEMBER에 기록되어야 한다.
*/

-- DBMS 출력창 ON
SET SERVEROUTPUT ON;

-- NEW_MEMBER 테이블 생성(번호, 이름, 전화번호, 메일, 혈액형)
DROP TABLE NEW_MEMBER;
CREATE TABLE NEW_MEMBER(
    N_NO    NUMBER,
    N_NAME  VARCHAR2(20) NOT NULL,
    N_PHONE VARCHAR2(15),
    N_MAIL  VARCHAR2(30),
    N_BLOOD VARCHAR2(5),
    CONSTRAINT PK_N_NO PRIMARY KEY(N_NO)
);

-- NEW_MEMBER SEQUENCE 생성(초기값 100, 증가값 5, 캐쉬 2)
DROP SEQUENCE SEQ_NEW_MEMBER;
CREATE SEQUENCE SEQ_NEW_MEMBER
START WITH 100
INCREMENT BY 5
CACHE 2;

SELECT * FROM NEW_MEMBER;
SELECT * FROM USER_SEQUENCES;

-- 회원 등록 (5명이상)
INSERT INTO NEW_MEMBER VALUES(SEQ_NEW_MEMBER.NEXTVAL, '로이드', 
    '010-1234-5678', 'lo@kh.co.kr', 'AB');
INSERT INTO NEW_MEMBER VALUES(SEQ_NEW_MEMBER.NEXTVAL, '하비엘', 
    '010-4321-8765', 'ha@kh.co.kr', 'O');
INSERT INTO NEW_MEMBER VALUES(SEQ_NEW_MEMBER.NEXTVAL, '마젠타노', 
    '010-1324-5768', 'ma@kh.co.kr', 'O');
INSERT INTO NEW_MEMBER VALUES(SEQ_NEW_MEMBER.NEXTVAL, '줄리앙', 
    '010-1423-5867', 'ang@kh.co.kr', 'RH-A');
INSERT INTO NEW_MEMBER VALUES(SEQ_NEW_MEMBER.NEXTVAL, '세라자드', 
    '010-2314-6758', 'se@kh.co.kr', 'B');
    
COMMIT;
ROLLBACK;

-- BACK_MEMBER 테이블생성(백업번호, 원본번호, 이름, 전화번호, 메일, 혈액형, 삭제날짜)
DROP TABLE BACK_MEMBER;
CREATE TABLE BACK_MEMBER(
    B_NO NUMBER,                -- 백업테이블 고유 번호
    N_NO NUMBER,                -- 원본 회원 번호
    B_NAME VARCHAR2(20),
    B_PHONE VARCHAR2(15),
    B_MAIL VARCHAR2(30),
    B_BLOOD VARCHAR2(5),
    B_DATE DATE DEFAULT SYSDATE,
    CONSTRAINT PK_B_NO PRIMARY KEY(B_NO)
);

-- BACK_MEMBER SEQUENCE 생성
DROP SEQUENCE SEQ_BACK_MEMBER;
CREATE SEQUENCE SEQ_BACK_MEMBER
START WITH 100
INCREMENT BY 5
CACHE 2;

-- TRIGGER 생성(NEW_MEMBER 데이터 삭제시 BACK_MEMBER 테이블에 저장)
DROP TRIGGER TRG_BACKUP_MEMBER;
CREATE OR REPLACE TRIGGER TRG_BACKUP_MEMBER
AFTER DELETE ON NEW_MEMBER
FOR EACH ROW
BEGIN
    INSERT INTO BACK_MEMBER(
        B_NO, N_NO, B_NAME, B_PHONE, B_MAIL, B_BLOOD, B_DATE
    ) VALUES (
        SEQ_BACK_MEMBER.NEXTVAL,
        :OLD.N_NO,
        :OLD.N_NAME,
        :OLD.N_PHONE,
        :OLD.N_MAIL,
        :OLD.N_BLOOD,
        SYSDATE
    );
    DBMS_OUTPUT.PUT_LINE(:OLD.N_NAME||'님의 회원정보가 백업되었습니다.');
END;
/
    
-- 회원데이터 DELETE 후 BACK_MEMBER 저장 확인하기

DELETE FROM NEW_MEMBER WHERE N_NAME = '로이드';
DELETE FROM NEW_MEMBER WHERE N_NAME = '하비엘';

SELECT * FROM NEW_MEMBER;
SELECT * FROM BACK_MEMBER;

ROLLBACK;